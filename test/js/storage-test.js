// Generated by CoffeeScript 1.7.1
(function() {
  define(['storage', 'chrome'], function(StorageModule, Chrome) {
    return describe('Storage', function() {
      beforeEach(function() {
        this.sandbox = sinon.sandbox.create();
        this.storageSetStub = this.sandbox.stub(Chrome.storage.local, 'set');
        this.storageGetStub = this.sandbox.stub(Chrome.storage.local, 'get');
        return this.clock = this.sandbox.useFakeTimers();
      });
      afterEach(function() {
        return this.sandbox.restore();
      });
      describe('Testing flush', function() {
        StorageModule.set('123', 5678);
        StorageModule.flush();
        return assert.equal(null, StorageModule.get('123'));
      });
      return describe('Testing get/set', function() {
        afterEach(function() {
          return StorageModule.flush();
        });
        it('should set and return values correctly', function() {
          var testArray, testString, testValue;
          testValue = 12345;
          testArray = [1, 2, 3, 4, 5];
          testString = '12345asdf';
          StorageModule.set('test', testValue);
          assert.equal(testValue, StorageModule.get('test'));
          StorageModule.set('test', testArray);
          assert.equal(testArray, StorageModule.get('test'));
          StorageModule.set('test', testString);
          return assert.equal(testString, StorageModule.get('test'));
        });
        it('should return null on missing keys', function() {
          return assert.equal(null, StorageModule.get('abcasdfasdfasdfkasdfjasdf'));
        });
        it('should call chrome.storage.local after 1000 ms', function() {
          var expectedPayload;
          StorageModule.set(123, 'hallo');
          StorageModule.set(456, 'wuhu');
          assert.isFalse(this.storageSetStub.calledOnce);
          this.clock.tick(1000);
          expectedPayload = {
            123: 'hallo',
            456: 'wuhu'
          };
          return assert.isTrue(this.storageSetStub.calledWith(expectedPayload));
        });
        return it('should init the module correctly', function() {
          var callback, expectedStorageContent, stub;
          expectedStorageContent = {
            123: 456,
            'asdf': 'muh',
            8888: 9999999
          };
          this.storageGetStub.restore();
          stub = this.sandbox.stub(Chrome.storage.local, 'get', function(key, callback) {
            return callback(expectedStorageContent);
          });
          callback = this.sandbox.spy();
          StorageModule.init(callback);
          assert.isTrue(callback.calledOnce, 'Callback executed correctly');
          assert.isTrue(stub.calledOnce);
          assert.equal(456, StorageModule.get(123));
          assert.equal('muh', StorageModule.get('asdf'));
          assert.equal(9999999, StorageModule.get(8888));
          return assert.equal(true, StorageModule.get('global_status'));
        });
      });
    });
  });

}).call(this);
