// Generated by CoffeeScript 1.6.3
(function() {
  define('ChromeProxyMock', function() {
    return {
      proxy: {
        settings: {
          set: function() {},
          clear: function() {}
        }
      }
    };
  });

  require.config({
    map: {
      'proxy-manager': {
        'chrome': 'ChromeProxyMock'
      }
    }
  });

  define(['proxy-manager', 'ChromeProxyMock', 'text!../testdata/packages.json', 'text!../testdata/servers.json'], function(ProxyManager, Chrome, testPackages, testServers) {
    testServers = JSON.parse(testServers);
    testPackages = JSON.parse(testPackages);
    return describe('Proxy Manager', function() {
      describe('Script generation', function() {
        it('should generate the correct routing script', function() {
          var i, testConfigs, testResults, _results;
          testConfigs = [
            {
              "startsWith": "",
              "contains": [],
              "host": "google.co.uk"
            }, {
              "startsWith": "",
              "contains": ['also contains', 'multiple things'],
              "host": "google.com"
            }, {
              "startsWith": "startswith",
              "contains": ['contains'],
              "host": "google.com"
            }
          ];
          testResults = ["(host == 'google.co.uk')", "(url.indexOf('also contains') != -1 && url.indexOf('multiple things') != -1 && host == 'google.com')", "(shExpMatch(url, 'startswith*') && url.indexOf('contains') != -1 && host == 'google.com')"];
          i = 0;
          _results = [];
          while (i < testConfigs.length) {
            assert.equal(testResults[i], ProxyManager.parseRoutingConfig(testConfigs[i]));
            _results.push(i += 1);
          }
          return _results;
        });
        return it('should generate the correct proxy autoconfig', function() {
          var actualConfig, expectedConfig, generateAndScrumbleServerStringStub, packageRoute, parseRoutingConfigSpy, pkg, routeAmounts, server, serverCountries, _i, _j, _k, _len, _len1, _len2, _ref;
          parseRoutingConfigSpy = sinon.spy(ProxyManager, 'parseRoutingConfig');
          generateAndScrumbleServerStringStub = sinon.stub(ProxyManager, 'generateAndScrumbleServerString', function(serverArray) {
            return "PROXY " + (serverArray.join('; PROXY '));
          });
          actualConfig = ProxyManager.generateProxyAutoconfigScript(testPackages, testServers);
          routeAmounts = 0;
          for (_i = 0, _len = testPackages.length; _i < _len; _i++) {
            pkg = testPackages[_i];
            routeAmounts += pkg.routing.length;
            _ref = pkg.routing;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              packageRoute = _ref[_j];
              assert.isTrue(parseRoutingConfigSpy.calledWith(packageRoute), 'called the config generator with the correct parameter');
            }
          }
          assert.equal(routeAmounts, parseRoutingConfigSpy.callCount);
          expectedConfig = "function FindProxyForURL(url, host) {if ((url.indexOf('vevo.com') != -1 && url.indexOf('vevo2.com') != -1) || (shExpMatch(url, 'http://www.beatsmusic.com*'))) { return 'PROXY http://einsvonzwei.de:8080; PROXY http://zweivonzwei.de:8080' } else if ((host == 'www.google.com') || (host == 'another.com')) { return 'PROXY http://anothercountry.de:8080' } else { return 'DIRECT'; }}";
          assert.equal(expectedConfig, actualConfig);
          serverCountries = {};
          for (_k = 0, _len2 = testServers.length; _k < _len2; _k++) {
            server = testServers[_k];
            serverCountries[server.country] = true;
          }
          assert.equal(Object.keys(serverCountries).length, generateAndScrumbleServerStringStub.callCount);
          parseRoutingConfigSpy.restore();
          return generateAndScrumbleServerStringStub.restore();
        });
      });
      return describe('Proxy setting / removing behaviour', function() {
        return it('should set the proxy correctly', function() {
          var expectedPayload, proxyClearStub, proxySetStub, proxyString;
          proxySetStub = sinon.stub(Chrome.proxy.settings, 'set');
          proxyString = 'asdf';
          expectedPayload = {
            value: {
              mode: "pac_script",
              pacScript: {
                data: 'asdf'
              }
            },
            scope: 'regular'
          };
          ProxyManager.setProxyAutoconfig(proxyString);
          assert.isTrue(proxySetStub.calledOnce);
          assert.isTrue(proxySetStub.calledWith(expectedPayload));
          proxyClearStub = sinon.stub(Chrome.proxy.settings, 'clear');
          ProxyManager.clearProxy();
          return assert.isTrue(proxyClearStub.calledOnce);
        });
      });
    });
  });

}).call(this);
