// Generated by CoffeeScript 1.7.1
(function() {
  define(['runtime', 'package-manager', 'server-manager', 'proxy-manager', 'storage'], function(Runtime, PackageManager, ServerManager, ProxyManager, Storage) {
    return describe('Runtime ', function() {
      beforeEach(function() {
        return this.sandbox = sinon.sandbox.create();
      });
      afterEach(function() {
        return this.sandbox.restore();
      });
      return describe('start', function() {
        it('should do nothing if no servers or packages are available', function() {
          var generatePacStub, getInstalledPackagesStub, getServersStub, setPacStub, storageGetStub;
          getInstalledPackagesStub = this.sandbox.stub(PackageManager, 'getInstalledPackages', function() {
            return [];
          });
          getServersStub = this.sandbox.stub(ServerManager, 'getServers', function() {
            return [];
          });
          storageGetStub = this.sandbox.stub(Storage, 'get', function(key) {
            if (key === 'global_status') {
              return true;
            }
          });
          generatePacStub = this.sandbox.stub(ProxyManager, 'generateProxyAutoconfigScript');
          setPacStub = this.sandbox.stub(ProxyManager, 'setProxyAutoconfig');
          Runtime.start();
          assert.isTrue(getInstalledPackagesStub.calledOnce);
          assert.isTrue(getServersStub.calledOnce);
          assert.isFalse(generatePacStub.calledOnce);
          return assert.isFalse(setPacStub.calledOnce);
        });
        it('should do nothing if global_status is set to false', function() {
          var generatePacStub, getInstalledPackagesStub, getServersStub, setPacStub, storageGetStub;
          getInstalledPackagesStub = this.sandbox.stub(PackageManager, 'getInstalledPackages', function() {
            return [];
          });
          getServersStub = this.sandbox.stub(ServerManager, 'getServers', function() {
            return [];
          });
          storageGetStub = this.sandbox.stub(Storage, 'get', function(key) {
            if (key === 'global_status') {
              return false;
            }
          });
          generatePacStub = this.sandbox.stub(ProxyManager, 'generateProxyAutoconfigScript');
          setPacStub = this.sandbox.stub(ProxyManager, 'setProxyAutoconfig');
          Runtime.start();
          assert.isFalse(getInstalledPackagesStub.calledOnce);
          assert.isFalse(getServersStub.calledOnce);
          assert.isFalse(generatePacStub.calledOnce);
          return assert.isFalse(setPacStub.calledOnce);
        });
        it('should generate and set pac if packages and servers are available', function() {
          var generatePacStub, getInstalledPackagesStub, getServersStub, setPacStub, storageGetStub;
          getInstalledPackagesStub = this.sandbox.stub(PackageManager, 'getInstalledPackages', function() {
            return [1];
          });
          getServersStub = this.sandbox.stub(ServerManager, 'getServers', function() {
            return [1, 2, 3];
          });
          storageGetStub = this.sandbox.stub(Storage, 'get', function(key) {
            if (key === 'global_status') {
              return true;
            }
          });
          generatePacStub = this.sandbox.stub(ProxyManager, 'generateProxyAutoconfigScript');
          setPacStub = this.sandbox.stub(ProxyManager, 'setProxyAutoconfig');
          Runtime.start();
          assert.isTrue(getInstalledPackagesStub.calledOnce);
          assert.isTrue(getServersStub.calledOnce);
          assert.isTrue(generatePacStub.calledOnce);
          return assert.isTrue(setPacStub.calledOnce);
        });
        it('should call start on restart', function() {
          var stub;
          stub = this.sandbox.stub(Runtime, 'start');
          Runtime.restart();
          return assert.isTrue(stub.calledOnce);
        });
        return it('should reset the proxy on stop', function() {
          var clearProxyStub;
          clearProxyStub = this.sandbox.stub(ProxyManager, 'clearProxy');
          Runtime.stop();
          return assert.isTrue(clearProxyStub.calledOnce);
        });
      });
    });
  });

}).call(this);
