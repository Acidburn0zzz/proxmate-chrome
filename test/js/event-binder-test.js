// Generated by CoffeeScript 1.7.1
(function() {
  define(['event-binder', 'chrome', 'package-manager', 'storage', 'runtime'], function(EventBinder, Chrome, PackageManager, Storage, Runtime) {
    return describe('Event Binder ', function() {
      beforeEach(function() {
        return this.sandbox = sinon.sandbox.create();
      });
      afterEach(function() {
        return this.sandbox.restore();
      });
      it('shold bind chrome message events on init', function() {
        var bindMessageEventStub, messageListenerStub;
        bindMessageEventStub = this.sandbox.stub(Chrome.runtime.onMessage, 'addListener');
        messageListenerStub = this.sandbox.stub(EventBinder, 'messageListener');
        EventBinder.init();
        return assert.isTrue(bindMessageEventStub.calledWith(messageListenerStub));
      });
      return describe('event behaviour', function() {
        it('should call packageManager.installpackage on installPackage event', function() {
          var callback, flag, installPackageStub;
          callback = this.sandbox.spy();
          installPackageStub = this.sandbox.stub(PackageManager, 'installPackage', function(id, callback) {
            return callback();
          });
          flag = EventBinder.messageListener({
            action: 'installPackage',
            params: {
              packageId: 'asdf'
            }
          }, {}, callback);
          assert.isTrue(flag);
          assert.isTrue(installPackageStub.calledWith('asdf'));
          return assert.isTrue(callback.calledOnce);
        });
        it('should retrieve storage content on getProxmateGlobalStatus event', function() {
          var callback, flag, storageGetStub;
          callback = this.sandbox.spy();
          storageGetStub = this.sandbox.stub(Storage, 'get', function(key) {
            return true;
          });
          flag = EventBinder.messageListener({
            action: 'getProxmateGlobalStatus',
            params: {}
          }, {}, callback);
          assert.isTrue(storageGetStub.calledWith('global_status'));
          assert.isTrue(callback.calledWith(true));
          storageGetStub.restore();
          callback = this.sandbox.spy();
          storageGetStub = this.sandbox.stub(Storage, 'get', function(key) {
            return null;
          });
          flag = EventBinder.messageListener({
            action: 'getProxmateGlobalStatus',
            params: {}
          }, {}, callback);
          assert.isTrue(storageGetStub.calledWith('global_status'));
          return assert.isTrue(callback.calledWith(false));
        });
        return it('should set the proxmate status correctly on setProxmateGlobalStatus', function() {
          var callback, flag, startStub, stopStub, storageSetStub;
          callback = this.sandbox.spy();
          storageSetStub = this.sandbox.stub(Storage, 'set');
          startStub = this.sandbox.stub(Runtime, 'start');
          stopStub = this.sandbox.stub(Runtime, 'stop');
          flag = EventBinder.messageListener({
            action: 'setProxmateGlobalStatus',
            params: {
              newStatus: true
            }
          }, {}, callback);
          assert.isTrue(storageSetStub.calledWith('global_status', true));
          assert.isTrue(callback.calledOnce);
          assert.isTrue(startStub.calledOnce);
          storageSetStub.restore();
          callback = this.sandbox.spy();
          storageSetStub = this.sandbox.stub(Storage, 'set');
          flag = EventBinder.messageListener({
            action: 'setProxmateGlobalStatus',
            params: {
              newStatus: false
            }
          }, {}, callback);
          assert.isTrue(storageSetStub.calledWith('global_status', false));
          assert.isTrue(callback.calledOnce);
          assert.isTrue(stopStub.calledOnce);
          storageSetStub.restore();
          callback = this.sandbox.spy();
          storageSetStub = this.sandbox.stub(Storage, 'set');
          flag = EventBinder.messageListener({
            action: 'setProxmateGlobalStatus',
            params: {
              newStatus: 'asdf'
            }
          }, {}, callback);
          assert.isTrue(storageSetStub.calledWith('global_status', false));
          assert.isTrue(callback.calledOnce);
          return assert.isTrue(stopStub.calledTwice);
        });
      });
    });
  });

}).call(this);
