// Generated by CoffeeScript 1.7.1
(function() {
  define(['package-manager', 'storage', 'config', 'text!../testdata/packages.json', 'text!../testdata/servers.json'], function(PackageManager, Storage, Config, testPackages, testServers) {
    testServers = JSON.parse(testServers);
    testPackages = JSON.parse(testPackages);
    return describe('Package Manager', function() {
      beforeEach(function() {
        this.sandbox = sinon.sandbox.create();
        this.storageGetStub = this.sandbox.stub(Storage, 'get', function() {
          return {
            'somethingThatsUpToDate': 2,
            'somethingOutdated': 1,
            'somethingWithoutUpdate': 1,
            'somethingElseOutdated': 2
          };
        });
        this.storageSetStub = this.sandbox.stub(Storage, 'set');
        this.sandbox.stub(Config, 'get', function() {
          return 'www.abc.de';
        });
        return this.xhr = this.sandbox.useFakeXMLHttpRequest();
      });
      afterEach(function() {
        return this.sandbox.restore();
      });
      describe('The update behaviour', function() {
        afterEach(function() {
          var key, val, _results;
          _results = [];
          for (key in PackageManager) {
            val = PackageManager[key];
            if (typeof PackageManager[key].restore === 'function') {
              _results.push(PackageManager[key].restore());
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
        it('should checkForUpdates on init', function() {
          var spy;
          spy = this.sandbox.stub(PackageManager, 'checkForUpdates');
          PackageManager.init();
          return assert.isTrue(spy.calledOnce);
        });
        it('should download the version overview and execute callback', function() {
          var callback, expectedPayload;
          callback = this.sandbox.spy();
          PackageManager.downloadVersionRepository(callback);
          expectedPayload = {
            "1337asdf": 1,
            "anotherrandomID": 2
          };
          assert.equal(1, this.sandbox.server.requests.length);
          assert.equal('www.abc.de/api/package/update.json', this.sandbox.server.requests[0].url);
          this.sandbox.server.requests[0].respond(200, {
            'Content-Type': 'application/json'
          }, JSON.stringify(expectedPayload));
          return assert.isTrue(callback.calledWith(expectedPayload));
        });
        return it('should call downloadVersionRepository and install outdated packages', function() {
          var downloadVersionRepositoryStub, installPackageStub, testVersionJson;
          testVersionJson = {
            'somethingThatsUpToDate': 2,
            'somethingOutdated': 2,
            'somethingElseOutdated': 3
          };
          downloadVersionRepositoryStub = this.sandbox.stub(PackageManager, "downloadVersionRepository", function(callback) {
            return callback(testVersionJson);
          });
          installPackageStub = this.sandbox.stub(PackageManager, "installPackage");
          PackageManager.checkForUpdates();
          assert.isTrue(downloadVersionRepositoryStub.calledOnce);
          assert.isTrue(installPackageStub.calledTwice, "All outdated packages have been passed to installing");
          assert.isTrue(installPackageStub.calledWith('somethingOutdated'));
          return assert.isTrue(installPackageStub.calledWith('somethingElseOutdated'));
        });
      });
      describe('Installation behaviour', function() {
        return it('should download package information from server', function() {
          var newInstalledPackageObject, pkgId, pkgInfo;
          pkgId = 'somethingOutdated';
          pkgInfo = testPackages[0];
          newInstalledPackageObject = {
            'somethingThatsUpToDate': 2,
            'somethingOutdated': 1,
            'somethingWithoutUpdate': 1,
            'somethingElseOutdated': 2
          };
          PackageManager.installPackage(pkgId);
          assert.equal(1, this.sandbox.server.requests.length);
          assert.equal("www.abc.de/api/package/" + pkgId + ".json", this.sandbox.server.requests[0].url);
          this.sandbox.server.requests[0].respond(200, {
            'Content-Type': 'application/json'
          }, JSON.stringify(pkgInfo));
          assert.isTrue(this.storageGetStub.calledOnce);
          assert.isTrue(this.storageSetStub.calledTwice);
          assert.isTrue(this.storageGetStub.calledWith('installed_packages'));
          assert.isTrue(this.storageSetStub.calledWith(pkgId, pkgInfo), 'The Storage got called with the correct ID and payload');
          return assert.isTrue(this.storageSetStub.calledWith('installed_packages', newInstalledPackageObject), 'The new package ID got added in the installed_packages array');
        });
      });
      return describe('Basic functionality', function() {
        return it('should retrieve all installed packages', function() {
          var StorageGetMock, expectedJson, packages, pkg, _i, _len;
          expectedJson = testPackages;
          this.storageGetStub.restore();
          StorageGetMock = this.sandbox.stub(Storage, 'get', function(key) {
            var ids, pkg, _i, _j, _len, _len1;
            switch (key) {
              case 'installed_packages':
                ids = {};
                for (_i = 0, _len = testPackages.length; _i < _len; _i++) {
                  pkg = testPackages[_i];
                  ids[pkg._id] = pkg.version;
                }
                return ids;
              default:
                for (_j = 0, _len1 = testPackages.length; _j < _len1; _j++) {
                  pkg = testPackages[_j];
                  if (pkg._id === key) {
                    return pkg;
                  }
                }
            }
          });
          packages = PackageManager.getInstalledPackages();
          assert.equal(testPackages.length + 1, StorageGetMock.callCount);
          assert.isTrue(StorageGetMock.calledWith('installed_packages'), 'Installed packages have been queried from storage');
          for (_i = 0, _len = testPackages.length; _i < _len; _i++) {
            pkg = testPackages[_i];
            assert.isTrue(StorageGetMock.calledWith(pkg._id), 'Got called with the correct id');
          }
          return assert.deepEqual(expectedJson.sort(), packages.sort());
        });
      });
    });
  });

}).call(this);
